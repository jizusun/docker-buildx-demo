name: build our image

on: push

jobs:
  build_image:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: install buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
      - name: login to docker hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: build and push the image
        run: |
          docker buildx build --push \
            --platform linux/arm/v7 . \
            --tag jizu/multiarch-github-actions:latest 

          docker buildx build --push \
            --platform linux/arm/v7 . \
            --tag jizu/multiarch-github-actions:latest 

          sh docker-cp.sh
          cp main main-linux-armv7
          file main-linux-armv7

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: main-linux-armv7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


          
        # --platform linux/amd64,linux/arm/v7,linux/arm64 .

  # armv7_job:
  #   # The host should always be Linux
  #   runs-on: ubuntu-18.04
  #   name: Build on debian buster armv7
  #   steps:
  #     - uses: actions/checkout@v2.1.0
  #     - uses: uraimo/run-on-arch-action@v2.0.5
  #       name: Run commands
  #       id: runcmd
  #       with:
  #         arch: armv7
  #         distro: buster

  #         # Not required, but speeds up builds by storing container images in
  #         # a GitHub package registry.
  #         githubToken: ${{ github.token }}

  #         # Set an output parameter `uname` for use in subsequent steps
  #         run: |
  #           uname -a
  #           echo ::set-output name=uname::$(uname -a)

  #     - name: Get the output
  #       # Echo the `uname` output parameter from the `runcmd` step
  #       run: |
  #         echo "The uname output was ${{ steps.runcmd.outputs.uname }}"      